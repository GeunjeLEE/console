name: Deploy Storybook
on:
  workflow_dispatch:
  push:
    branches:
      - master
    paths-ignore:
      - '.github/**'
      - '**/deploy/**'
      - '**/skaffold.template.yaml'
      - '**/Dockerfile'
      - '**/.distignore'
      - '**/README.md'
      - '**/LICENSE'
      - '**/AUTHORS'
      - '**/.husky/**'
      - '**/commitlint.config.js'
      - '**/.lintstagedrc.js'
      - 'apps/web/**'
      - 'packages/core-lib/**'

env:
  BUILD_PATH: "/tmp/spaceone/build"

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
          token: ${{ secrets.PAT_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Cache dependencies
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

      - name: Prepare build
        run: |
          mkdir -p ${{ env.BUILD_PATH }}
          mkdir -p ${{ env.BUILD_PATH }}/apps
          mkdir -p ${{ env.BUILD_PATH }}/packages
          cp package.json package-lock.json turbo.json  ${{ env.BUILD_PATH }}/
          cp -r apps/storybook ${{ env.BUILD_PATH }}/apps/storybook
          cp -r packages/mirinae ${{ env.BUILD_PATH }}/packages/mirinae
          cp -r packages/tsconfig ${{ env.BUILD_PATH }}/packages/tsconfig
          cp -r packages/eslint-config-custom ${{ env.BUILD_PATH }}/packages/eslint-config-custom

      - name: Install dependencies
        working-directory: ${{ env.BUILD_PATH }}
        if: steps.node-cache.outputs.cache-hit != 'true'
        run: npm install

      - name: Build
        working-directory: ${{ env.BUILD_PATH }}
        env:
          NODE_ENV: "production"
        run: |
          npm run build -- --filter=storybook

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.STORYBOOK_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.STORYBOOK_AWS_SECRET_KEY }}
          aws-region: ap-northeast-2

      - name: Deploy to s3
        run: aws s3 sync ${{ env.BUILD_PATH }}/apps/storybook/.out/ s3://${{ secrets.STORYBOOK_S3_BUCKET }} --delete

      - name: Invalidate CloudFront Cache
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.CDN_DISTRIBUTION_ID }} --paths "/*"

      - name: Slack
        if: always()
        uses: 8398a7/action-slack@v3.2.0
        with:
          status: ${{job.status}}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          author_name: Github Action Slack
        env:
          SLACK_WEBHOOK_URL: ${{secrets.SLACK_WEBHOOK_URL}}
